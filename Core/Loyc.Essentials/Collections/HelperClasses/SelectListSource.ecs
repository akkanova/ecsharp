#ecs;
using Loyc.Collections.Impl;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;

namespace Loyc.Collections;

define GenerateSelectClass($SelectList, $IList<T>)
{
	public class $SelectList<ListT, T, TResult> : ListSourceBase<TResult>
		where ListT : $IList<T>
	{
		public this(protected ListT _list, protected Func<T, TResult> _selector) {
			if (_list == null || _selector == null)
				throw new ArgumentNullException();
		}

		new public TResult this[int index]
		{
			get { return _selector(_list[index]); }
		}

		// There's no attribute like [return: MaybeNullIf("fail")]
		[return: MaybeNull]
		public override TResult TryGet(int index, out bool fail)
		{
			if (!(fail = ((uint)index >= (uint)_list.Count)))
				return _selector(_list[index]);
			else
				return default(TResult);
		}

		public sealed override int Count
		{
			get { return _list.Count; }
		}
	}
}
	
// *** Reminder: DO NOT MODIFY generated code ***
/// <summary>
/// Helper class: provides a modified view of an IList by transforming each element 
/// on-demand. Objects of this type are returned from 
/// <see cref="MutableListExtensionMethods.LinqToLists.Select{T,TResult}(IList{T},Func{T,TResult})"/>
/// </summary>
/// <typeparam name="T">input type</typeparam>
/// <typeparam name="TResult">output type</typeparam>
/// <typeparam name="ListT">Type of list being wrapped</typeparam>
GenerateSelectClass(SelectList, IList<T>);
	
/// <summary>
/// Helper class: provides a modified view of an IListSource by transforming each element 
/// on-demand. Objects of this type are returned from 
/// <see cref="LinqToLists.Select{T,TResult}(IListSource{T},Func{T,TResult})"/>
/// </summary>
/// <typeparam name="T">input type</typeparam>
/// <typeparam name="TResult">output type</typeparam>
/// <typeparam name="ListT">Type of list being wrapped</typeparam>
GenerateSelectClass(SelectReadOnlyList, IReadOnlyList<T>);

/// <summary>
/// Helper class: provides a modified view of an IListSource by transforming each element 
/// on-demand. Objects of this type are returned from 
/// <see cref="LinqToLists.Select{T,TResult}(IListSource{T},Func{T,TResult})"/>
/// </summary>
/// <typeparam name="T">input type</typeparam>
/// <typeparam name="TResult">output type</typeparam>
/// <typeparam name="ListT">Type of list being wrapped</typeparam>
public class SelectListSource<ListT, T, TResult> : SelectReadOnlyList<ListT, T, TResult>
	where ListT : IListSource<T>
{
	public SelectListSource(ListT list, Func<T, TResult> selector) : base(list, selector) { }

	[return: MaybeNull]
	public override TResult TryGet(int index, out bool fail)
	{
		T? t = _list.TryGet(index, out fail);
		if (!fail)
			return _selector([@`%trailing`(@`%rawText`("!"))] t);
		else
			return default(TResult);
	}
}
